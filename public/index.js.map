{
  "version": 3,
  "sources": ["../src/vector.ts", "../src/board/slot.ts", "../src/board/connection.ts", "../src/board.ts", "../src/player.ts", "../src/game.ts", "../src/renderer.ts", "../src/index.ts"],
  "sourcesContent": ["export type Vector = {\n  row: number,\n  column: number\n}\n\nexport const addVectors = (v1: Vector, v2: Vector): Vector => {\n  return {\n    row: v1.row + v2.row,\n    column: v1.column + v2.column\n  }\n}\n\nconst scale = (vector: Vector, scalar: number) => {\n  return {\n    row: vector.row * scalar,\n    column: vector.column * scalar\n  }\n}\n\nexport const subtractVectors = (v1: Vector, v2: Vector): Vector => {\n  return addVectors(v1, scale(v2, -1))\n}\n\nexport const sameVectors = (vector1: Vector, vector2: Vector): boolean => {\n  return vector1.row    == vector2.row\n    && vector1.column == vector2.column\n}\n\nexport const vToS = (vector: Vector): String => {\n  return `{row: ${vector.row}, column: ${vector.column}}`\n}\n\nexport function intersects([a, b]: [Vector, Vector], [c, d]: [Vector, Vector]) {\n  const determinant = (b.row - a.row) * (d.column - c.column) - (d.row - c.row) * (b.column - a.column)\n  if (determinant == 0) return false\n\n  const lambda = ((d.column - c.column) * (d.row - a.row) + (c.row - d.row) * (d.column - a.column)) / determinant\n  const gamma = ((a.column - b.column) * (d.row - a.row) + (b.row - a.row) * (d.column - a.column)) / determinant\n\n  return (0 < lambda && lambda < 1) && (0 < gamma && gamma < 1)\n};\n", "import { Color } from \"../color\";\nimport { Position } from \"../board\";\n\nexport class Slot {\n  position: Position\n  color: Color\n\n  constructor(position: Position) {\n    this.color = null\n    this.position = position\n  }\n\n  get isOccupied() {\n    return this.color !== null\n  }\n}\n", "import { Color } from \"../color\";\nimport { Slot } from \"./slot\";\nimport { intersects, sameVectors, subtractVectors, Vector } from \"../vector\";\nimport { Position } from \"../board\";\n\nexport class Connection {\n  color: Color\n  slots: [Slot, Slot]\n\n  constructor(color: Color, slots: [Slot, Slot]) {\n    this.color = color\n    this.slots = slots\n  }\n\n  get positions(): [Position, Position] {\n    return [this.slots[0].position, this.slots[1].position]\n  }\n\n  overlaps = (otherConnection: Connection) => {\n    const firstPegConnectedToOtherConnection =\n      otherConnection.positions.some(position => sameVectors(this.positions[0], position))\n    const secondPegConnectedToOtherConnection =\n      otherConnection.positions.some(position => sameVectors(this.positions[1], position))\n\n    if (firstPegConnectedToOtherConnection && secondPegConnectedToOtherConnection) return true\n    if (firstPegConnectedToOtherConnection || secondPegConnectedToOtherConnection) return false\n\n    return intersects(this.positions, otherConnection.positions)\n  }\n}\n", "import { addVectors, sameVectors, Vector } from \"./vector\";\nimport { Color } from \"./color\";\nimport { Slot } from \"./board/slot\";\nimport { Connection } from \"./board/connection\";\n\nexport type Position = Vector\n\nexport class Board {\n  private static neighborDiffs: Vector[] = [\n    {row: 1, column: 2},\n    {row: 2, column: 1},\n    {row: 1, column: -2},\n    {row: -2, column: 1},\n    {row: -1, column: 2},\n    {row: 2, column: -1},\n    {row: -1, column: -2},\n    {row: -2, column: -1}\n  ]\n\n  readonly slots: Slot[] = []\n  readonly connections: Connection[] = []\n  readonly size: number\n\n  constructor(size = 16) {\n    this.size = size\n    this.populateSlots(size)\n  }\n\n  place(color: Color, position: Position): Slot {\n    if (!this.isValidPosition(position)) return null\n\n    if (this.onOpponentBorder(position, color)) return null\n\n    const slot = this.slotAt(position)\n    if (slot.isOccupied) return null\n\n    slot.color = color\n\n    return slot\n  }\n\n  connect(color: Color, slots: [Slot, Slot]): Connection {\n    const connection = new Connection(color, slots)\n    if(!this.isValidConnection(connection)) return null;\n\n    this.connections.push(connection)\n\n    return connection\n  }\n\n  slotAt = (position: Position): Slot | null => {\n    return this.slots.find(slot => sameVectors(slot.position, position))\n  }\n\n  neighboringSlots(position: Position): Slot[] {\n    return this.neighboringPositions(position).map(this.slotAt).filter(slot => slot.isOccupied)\n  }\n\n  private isValidPosition = (position: Position): boolean => {\n    return (\n      this.isOnBoard(position) &&\n      !this.corners.some(corner => sameVectors(position, corner))\n    )\n  }\n\n  private isValidConnection = (connection: Connection): boolean => {\n    return !(this.connections.some((other) => connection.overlaps(other)))\n  }\n\n  isOnBoard = (position: Position): boolean => {\n    return (\n      position.row >= 0 &&\n      position.row < this.size &&\n      position.column >= 0 &&\n      position.column < this.size\n    )\n  }\n\n  private populateSlots(size: number) {\n    for (let row = 0; row <=size; row++) {\n      for (let column = 0; column <= size; column++) {\n        const position = { row, column }\n        if (this.corners.some(corner => sameVectors(position, corner))) continue\n\n        this.slots.push(new Slot(position))\n      }\n    }\n  }\n\n  private get corners(): Position[] {\n    return [\n      { row: 0, column: 0 },\n      { row: 0, column: this.size - 1 },\n      { row: this.size - 1, column: 0 },\n      { row: this.size - 1, column: this.size - 1 }\n    ]\n  }\n\n  private onOpponentBorder(position: Position, color: Color) {\n    return (\n      color == Color.Red && (position.column == 0 || position.column == this.size - 1) ||\n      color == Color.Blue && (position.row == 0 || position.row == this.size - 1)\n    )\n  }\n\n  private neighboringPositions(position: Position): Position[] {\n    const potentialNeighbors = Board.neighborDiffs.map(diff => addVectors(position, diff))\n    return potentialNeighbors.filter(this.isValidPosition)\n  }\n}\n", "import { Color } from \"./color\";\n\nexport class Player {\n  color: Color\n\n  constructor(color: Color) {\n    this.color = color\n  }\n}\n", "import { Board, Position } from \"./board\";\nimport { Color } from \"./color\";\nimport { Player } from \"./player\";\nimport { Slot } from \"./board/slot\";\nimport { Connection } from \"./board/connection\";\n\nexport class Game {\n  players = [new Player(Color.Red), new Player(Color.Blue)]\n  board =  new Board()\n  currentPlayerIndex = 0\n\n  get currentPlayer() {\n    return this.players[this.currentPlayerIndex]\n  }\n\n  placePeg(position: Position): PlacePegResult {\n    const slot = this.board.place(this.currentPlayer.color, position)\n    if (!slot) return { slot, connectionsAdded: [] }\n\n    const connections = this.addConnections(position, slot);\n\n    this.endTurn()\n\n    return { slot, connectionsAdded: connections }\n  }\n\n  private addConnections(position: Position, slot: Slot) {\n    const neighboringSlots = this.board.neighboringSlots(position)\n\n    const neighboringSlotsWithColor =\n      neighboringSlots.filter(slot => slot.color == this.currentPlayer.color)\n\n    const connections =\n      neighboringSlotsWithColor.map(neighbor => this.connect(neighbor, slot))\n\n    return connections.filter(Boolean);\n  }\n\n  private connect(slot1: Slot, slot2: Slot): Connection | null {\n    return this.board.connect(this.currentPlayer.color, [slot1, slot2])\n  }\n\n  endTurn() {\n    this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length\n  }\n}\n\ntype PlacePegResult = {\n  slot: Slot,\n  connectionsAdded: any[]\n}\n\n", "import { Board, Position } from \"./board\"\nimport color = Mocha.reporters.Base.color;\nimport { Color } from \"./color\";\n\nconst EMPTY_SLOT_RADIUS = 4\nconst EMPTY_SLOT_COLOR = '#777'\n\nconst PEG_RADIUS = 7\nconst COLORS: Record<Color, string> = {\n  'RED': '#C71585',\n  'BLUE': '#4682B4'\n}\n\nconst CONNECTION_WIDTH = 5\nconst BOUNDARY_WIDTH = 3\n\ntype Coordinates = {\n  x: number,\n  y: number\n}\n\nexport class Renderer {\n  canvas: HTMLCanvasElement\n  private offscreenCanvas: HTMLCanvasElement\n  ctx: CanvasRenderingContext2D\n  board: Board\n\n  get boardImageSize() {\n    return Math.min(this.canvas.width, this.canvas.height)\n  }\n\n  get slotGapSize() {\n    return this.boardImageSize / this.board.size\n  }\n\n  constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, board: Board) {\n    this.canvas = canvas\n    this.ctx = ctx\n    this.board = board\n    this.drawEmptyBoard()\n  }\n\n  draw() {\n    this.clear()\n    this.redrawEmptyBoard()\n    this.drawConnections()\n    this.drawPegs()\n  }\n\n  private clear() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawEmptyBoard() {\n    this.offscreenCanvas = document.createElement(\"canvas\");\n    this.offscreenCanvas.width = this.canvas.width;\n    this.offscreenCanvas.height = this.canvas.height;\n\n    const context = this.offscreenCanvas.getContext(\"2d\")\n    this.drawEmptySlots(context)\n    this.drawBoundaries(context)\n  }\n\n  private drawEmptySlots(context: CanvasRenderingContext2D) {\n    for (let slot of this.board.slots) {\n      this.drawCircle(\n        this.positionToCoordinates(slot.position),\n        EMPTY_SLOT_RADIUS,\n        EMPTY_SLOT_COLOR,\n        context\n      )\n    }\n  }\n\n  private drawBoundaries(context: CanvasRenderingContext2D) {\n    const min = this.slotGapSize\n    const max = this.boardImageSize - min\n\n    const topLeft = { x: min, y: min }\n    const topRight = { x: max, y: min }\n    const bottomLeft = { x: min, y: max }\n    const bottomRight = { x: max, y: max }\n\n    this.drawLine(COLORS[Color.Red], BOUNDARY_WIDTH, topLeft, topRight, context)\n    this.drawLine(COLORS[Color.Red], BOUNDARY_WIDTH, bottomLeft, bottomRight, context)\n    this.drawLine(COLORS[Color.Blue], BOUNDARY_WIDTH, topLeft, bottomLeft, context)\n    this.drawLine(COLORS[Color.Blue], BOUNDARY_WIDTH, topRight, bottomRight, context)\n  }\n\n  private redrawEmptyBoard() {\n    this.ctx.drawImage(this.offscreenCanvas, 0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  private drawConnections() {\n    for (let connection of this.board.connections) {\n      this.drawLine(\n        COLORS[connection.color],\n        CONNECTION_WIDTH,\n        this.positionToCoordinates(connection.slots[0].position),\n        this.positionToCoordinates(connection.slots[1].position)\n      )\n    }\n  }\n\n  private drawPegs() {\n    for (let slot of this.board.slots) {\n      if (!slot.isOccupied) continue\n      const slotCoordinates = this.positionToCoordinates(slot.position)\n      this.drawCircle(\n        slotCoordinates,\n        PEG_RADIUS,\n        COLORS[slot.color]\n      )\n    }\n  }\n\n  private drawCircle(coordinates: Coordinates, radius: number, color: string, context?: CanvasRenderingContext2D) {\n    const ctx = context || this.ctx\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(coordinates.x, coordinates.y, radius, 0, 2 * Math.PI)\n    ctx.fill()\n  }\n\n  private drawLine(color: string, width: number, from: Coordinates, to: Coordinates, context?: CanvasRenderingContext2D) {\n    const ctx = context || this.ctx\n\n    ctx.strokeStyle = color\n    ctx.lineWidth = width\n    ctx.lineCap = \"round\"\n    ctx.beginPath()\n    ctx.moveTo(from.x, from.y)\n    ctx.lineTo(to.x, to.y)\n    ctx.stroke();\n  }\n\n  private positionToCoordinates(position: Position): Coordinates {\n    return {\n      x: (position.column + 0.5) * this.slotGapSize,\n      y: (position.row + 0.5) * this.slotGapSize\n    }\n  }\n}\n", "import { Game } from \"./game\";\nimport { Renderer } from \"./renderer\";\n\nconst canvas = document.getElementById('game-canvas') as HTMLCanvasElement\nconst setCanvasDimensions = () => {\n  canvas.width = Math.min(canvas.offsetHeight, canvas.offsetWidth)\n  canvas.height = Math.min(canvas.offsetHeight, canvas.offsetWidth)\n}\n\nconst game = new Game()\n\nconst renderer = new Renderer(\n  canvas,\n  canvas.getContext('2d'),\n  game.board\n)\n\nconst render = () => {\n  window.requestAnimationFrame(() => renderer.draw())\n}\nconst getCursorPosition = (event: MouseEvent) => {\n  const rect = canvas.getBoundingClientRect()\n  return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n  }\n}\n\ncanvas.addEventListener(\"click\", (event) => {\n  const cursorPosition = getCursorPosition(event)\n\n  const boardImageSize = Math.min(canvas.width, canvas.height)\n  const slotGapSize = boardImageSize / game.board.size\n\n  const positionClicked = {\n    row: Math.floor(cursorPosition.y / slotGapSize),\n    column:  Math.floor(cursorPosition.x / slotGapSize)\n  };\n\n  game.placePeg(positionClicked)\n  render()\n})\n\nwindow.addEventListener(\"resize\", () => {\n  setCanvasDimensions()\n  render()\n})\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  setCanvasDimensions()\n  render()\n})\n\n\n\n/*--- TESTING ---*/\n//\n// (<any>window).game = game\n//\n// function shuffle(o: any[]){ //v1.0\n//   for(let j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n//   return o;\n// }\n//\n// let shuffled: any[] = [];\n//\n// for (let i = 0; i < game.board.size; i++) {\n//   for (let j = 0; j < game.board.size; j++) {\n//     shuffled.push([i, j]);\n//   }\n// }\n//\n// shuffle(shuffled);\n// const delayMS = 50\n// for (let i = 0; i < shuffled.length*0.8; i++) {\n//   setTimeout(\n//     () =>  {\n//         game.placePeg({row: shuffled[i][0], column: shuffled[i][1]})\n//         render()\n//     },\n//     delayMS*i\n//   )\n// }\n//\n// render()\n"],
  "mappings": "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",
  "names": ["slot", "canvas"]
}
